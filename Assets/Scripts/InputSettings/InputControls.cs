//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.3.0
//     from Assets/Scripts/InputSettings/InputControls.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @InputControls : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @InputControls()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""InputControls"",
    ""maps"": [
        {
            ""name"": ""ActionMap"",
            ""id"": ""693a42d4-8970-4a83-ad9b-2e3c60f05fdd"",
            ""actions"": [
                {
                    ""name"": ""Turn"",
                    ""type"": ""PassThrough"",
                    ""id"": ""2fdd2782-2b4a-4a2b-82a9-2cc11f3fdb3c"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Thrust"",
                    ""type"": ""Button"",
                    ""id"": ""cdb8c7e8-1a73-4d7e-b3ce-c4026e13aa5e"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Shield"",
                    ""type"": ""Button"",
                    ""id"": ""c77a7907-46a1-45ed-897e-11d1ca75bda3"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Shoot"",
                    ""type"": ""Button"",
                    ""id"": ""b738a419-22bd-476a-b704-47b5c39a198b"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""BackButton"",
                    ""type"": ""Button"",
                    ""id"": ""40ad6650-6397-419d-8641-9e004c913927"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""1D Axis"",
                    ""id"": ""f873f5d6-4879-405a-8b45-fb97440d88be"",
                    ""path"": ""1DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Turn"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""negative"",
                    ""id"": ""576d7ad3-e5ad-4c14-b19a-542d5f34b85f"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Turn"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""positive"",
                    ""id"": ""b6df211c-0b2f-4f59-b299-2f4951df818b"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Turn"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""1D Axis"",
                    ""id"": ""a11fbe29-45d8-4ebd-90dd-f7681e11d3e4"",
                    ""path"": ""1DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Turn"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""negative"",
                    ""id"": ""2014b346-f3c7-404d-b296-d3d7484017ba"",
                    ""path"": ""<Gamepad>/leftStick/left"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Turn"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""positive"",
                    ""id"": ""34a3b039-804f-4e19-aecb-95a0ed9530fa"",
                    ""path"": ""<Gamepad>/leftStick/right"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Turn"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""81ac8b89-c178-406d-af45-9cc444220ebf"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Thrust"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""cd636b63-c8a4-4789-91f0-f3b9413690cc"",
                    ""path"": ""<Gamepad>/rightTrigger"",
                    ""interactions"": """",
                    ""processors"": ""AxisDeadzone(min=0.45,max=0.55)"",
                    ""groups"": """",
                    ""action"": ""Thrust"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""458cbd3f-8e97-4951-94f2-e84d76933278"",
                    ""path"": ""<Keyboard>/shift"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Shield"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""b7174542-a0e9-4179-8edf-7d149f64dffd"",
                    ""path"": ""<Gamepad>/leftTrigger"",
                    ""interactions"": """",
                    ""processors"": ""AxisDeadzone(min=0.45,max=0.55)"",
                    ""groups"": """",
                    ""action"": ""Shield"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""2caf13f7-add0-4392-8129-29afaaf1456c"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Shoot"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""344f9104-a1e2-4cfa-a231-85f97760fd06"",
                    ""path"": ""<Gamepad>/buttonWest"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Shoot"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""9de787b5-0258-4310-9949-bd4561370a13"",
                    ""path"": ""<Keyboard>/escape"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""BackButton"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""MenuMap"",
            ""id"": ""486f309a-cd10-440b-b9ee-42ff610222e8"",
            ""actions"": [
                {
                    ""name"": ""Select"",
                    ""type"": ""Button"",
                    ""id"": ""46d55b98-c331-4e2c-8b48-1f053808834b"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""BackButton"",
                    ""type"": ""Button"",
                    ""id"": ""1fb9caad-c914-4641-ae82-dacb37c6b1ea"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""98c95da8-7f21-443e-81c8-cc5a26f9c46b"",
                    ""path"": ""<Keyboard>/enter"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Select"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""338a6776-4819-4330-9c3f-2acf2f6252a7"",
                    ""path"": ""<Gamepad>/start"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Select"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""524ebe12-5a2b-46ac-9fb1-d0340d57b3db"",
                    ""path"": ""<Keyboard>/escape"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""BackButton"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // ActionMap
        m_ActionMap = asset.FindActionMap("ActionMap", throwIfNotFound: true);
        m_ActionMap_Turn = m_ActionMap.FindAction("Turn", throwIfNotFound: true);
        m_ActionMap_Thrust = m_ActionMap.FindAction("Thrust", throwIfNotFound: true);
        m_ActionMap_Shield = m_ActionMap.FindAction("Shield", throwIfNotFound: true);
        m_ActionMap_Shoot = m_ActionMap.FindAction("Shoot", throwIfNotFound: true);
        m_ActionMap_BackButton = m_ActionMap.FindAction("BackButton", throwIfNotFound: true);
        // MenuMap
        m_MenuMap = asset.FindActionMap("MenuMap", throwIfNotFound: true);
        m_MenuMap_Select = m_MenuMap.FindAction("Select", throwIfNotFound: true);
        m_MenuMap_BackButton = m_MenuMap.FindAction("BackButton", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // ActionMap
    private readonly InputActionMap m_ActionMap;
    private IActionMapActions m_ActionMapActionsCallbackInterface;
    private readonly InputAction m_ActionMap_Turn;
    private readonly InputAction m_ActionMap_Thrust;
    private readonly InputAction m_ActionMap_Shield;
    private readonly InputAction m_ActionMap_Shoot;
    private readonly InputAction m_ActionMap_BackButton;
    public struct ActionMapActions
    {
        private @InputControls m_Wrapper;
        public ActionMapActions(@InputControls wrapper) { m_Wrapper = wrapper; }
        public InputAction @Turn => m_Wrapper.m_ActionMap_Turn;
        public InputAction @Thrust => m_Wrapper.m_ActionMap_Thrust;
        public InputAction @Shield => m_Wrapper.m_ActionMap_Shield;
        public InputAction @Shoot => m_Wrapper.m_ActionMap_Shoot;
        public InputAction @BackButton => m_Wrapper.m_ActionMap_BackButton;
        public InputActionMap Get() { return m_Wrapper.m_ActionMap; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(ActionMapActions set) { return set.Get(); }
        public void SetCallbacks(IActionMapActions instance)
        {
            if (m_Wrapper.m_ActionMapActionsCallbackInterface != null)
            {
                @Turn.started -= m_Wrapper.m_ActionMapActionsCallbackInterface.OnTurn;
                @Turn.performed -= m_Wrapper.m_ActionMapActionsCallbackInterface.OnTurn;
                @Turn.canceled -= m_Wrapper.m_ActionMapActionsCallbackInterface.OnTurn;
                @Thrust.started -= m_Wrapper.m_ActionMapActionsCallbackInterface.OnThrust;
                @Thrust.performed -= m_Wrapper.m_ActionMapActionsCallbackInterface.OnThrust;
                @Thrust.canceled -= m_Wrapper.m_ActionMapActionsCallbackInterface.OnThrust;
                @Shield.started -= m_Wrapper.m_ActionMapActionsCallbackInterface.OnShield;
                @Shield.performed -= m_Wrapper.m_ActionMapActionsCallbackInterface.OnShield;
                @Shield.canceled -= m_Wrapper.m_ActionMapActionsCallbackInterface.OnShield;
                @Shoot.started -= m_Wrapper.m_ActionMapActionsCallbackInterface.OnShoot;
                @Shoot.performed -= m_Wrapper.m_ActionMapActionsCallbackInterface.OnShoot;
                @Shoot.canceled -= m_Wrapper.m_ActionMapActionsCallbackInterface.OnShoot;
                @BackButton.started -= m_Wrapper.m_ActionMapActionsCallbackInterface.OnBackButton;
                @BackButton.performed -= m_Wrapper.m_ActionMapActionsCallbackInterface.OnBackButton;
                @BackButton.canceled -= m_Wrapper.m_ActionMapActionsCallbackInterface.OnBackButton;
            }
            m_Wrapper.m_ActionMapActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Turn.started += instance.OnTurn;
                @Turn.performed += instance.OnTurn;
                @Turn.canceled += instance.OnTurn;
                @Thrust.started += instance.OnThrust;
                @Thrust.performed += instance.OnThrust;
                @Thrust.canceled += instance.OnThrust;
                @Shield.started += instance.OnShield;
                @Shield.performed += instance.OnShield;
                @Shield.canceled += instance.OnShield;
                @Shoot.started += instance.OnShoot;
                @Shoot.performed += instance.OnShoot;
                @Shoot.canceled += instance.OnShoot;
                @BackButton.started += instance.OnBackButton;
                @BackButton.performed += instance.OnBackButton;
                @BackButton.canceled += instance.OnBackButton;
            }
        }
    }
    public ActionMapActions @ActionMap => new ActionMapActions(this);

    // MenuMap
    private readonly InputActionMap m_MenuMap;
    private IMenuMapActions m_MenuMapActionsCallbackInterface;
    private readonly InputAction m_MenuMap_Select;
    private readonly InputAction m_MenuMap_BackButton;
    public struct MenuMapActions
    {
        private @InputControls m_Wrapper;
        public MenuMapActions(@InputControls wrapper) { m_Wrapper = wrapper; }
        public InputAction @Select => m_Wrapper.m_MenuMap_Select;
        public InputAction @BackButton => m_Wrapper.m_MenuMap_BackButton;
        public InputActionMap Get() { return m_Wrapper.m_MenuMap; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(MenuMapActions set) { return set.Get(); }
        public void SetCallbacks(IMenuMapActions instance)
        {
            if (m_Wrapper.m_MenuMapActionsCallbackInterface != null)
            {
                @Select.started -= m_Wrapper.m_MenuMapActionsCallbackInterface.OnSelect;
                @Select.performed -= m_Wrapper.m_MenuMapActionsCallbackInterface.OnSelect;
                @Select.canceled -= m_Wrapper.m_MenuMapActionsCallbackInterface.OnSelect;
                @BackButton.started -= m_Wrapper.m_MenuMapActionsCallbackInterface.OnBackButton;
                @BackButton.performed -= m_Wrapper.m_MenuMapActionsCallbackInterface.OnBackButton;
                @BackButton.canceled -= m_Wrapper.m_MenuMapActionsCallbackInterface.OnBackButton;
            }
            m_Wrapper.m_MenuMapActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Select.started += instance.OnSelect;
                @Select.performed += instance.OnSelect;
                @Select.canceled += instance.OnSelect;
                @BackButton.started += instance.OnBackButton;
                @BackButton.performed += instance.OnBackButton;
                @BackButton.canceled += instance.OnBackButton;
            }
        }
    }
    public MenuMapActions @MenuMap => new MenuMapActions(this);
    public interface IActionMapActions
    {
        void OnTurn(InputAction.CallbackContext context);
        void OnThrust(InputAction.CallbackContext context);
        void OnShield(InputAction.CallbackContext context);
        void OnShoot(InputAction.CallbackContext context);
        void OnBackButton(InputAction.CallbackContext context);
    }
    public interface IMenuMapActions
    {
        void OnSelect(InputAction.CallbackContext context);
        void OnBackButton(InputAction.CallbackContext context);
    }
}
